services:
  nginx:
    image: nginx:1.25.5-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    restart: unless-stopped

  frontend:
    build: 
      context: ./frontend/my-app
      dockerfile: Dockerfile.prod
    image: sobi/frontend:1.0
    environment:
      - NODE_ENV=production
      - PORT=3000
      - NEXT_PUBLIC_API_BASE_URL=https://13.125.215.242
      - NEXT_PUBLIC_FRONTEND_URL=https://13.125.215.242
    depends_on:
      - backend
    restart: unless-stopped
    expose:
      - "3000"
  
  backend:
    build:
      context: ./backend/sobi_backend  # JAR 파일이 있는 실제 위치
      dockerfile: ../Dockerfile        # 상위 디렉토리의 Dockerfile 사용
    image: sobi/backend:1.0
    container_name: sobi-backend
    ports:
      - "8080:8080"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/sobi
      - SPRING_DATASOURCE_USERNAME=sobiuser
      - SPRING_DATASOURCE_PASSWORD=sobipass
      - SPRING_DATA_REDIS_HOST=redis
      - APP_MQTT_BROKER_URL=tcp://172.26.6.236:1883
    depends_on:
      - db
      - redis
    restart: unless-stopped
  
  db:
    image: postgres:15.4
    container_name: sobi-db
    environment:
      - POSTGRES_DB=sobi
      - POSTGRES_USER=sobiuser
      - POSTGRES_PASSWORD=sobipass
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./sql:/docker-entrypoint-initdb.d
    restart: unless-stopped

  redis:
    image: redis:7.2.1
    container_name: sobi-redis
    ports:
      - "6379:6379"
    restart: unless-stopped

volumes:
  db_data: